// Code generated by hertz generator.

package main

import (
	"context"
	"net/http"
	"os"
	"strings"

	"github.com/Linda-ui/orbital_HeBao/hertz_gateway/biz/handler"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/kitex-contrib/registry-nacos/resolver"
)

func customizedRegister(r *server.Hertz) {
	r.GET("/ping", handler.Ping)

	r.GET("/", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(http.StatusOK, "the api gateway is running")
	})

	registerGateway(r)
}

// registerGateway registers the router of gateway
func registerGateway(r *server.Hertz) {
	group := r.Group("/gateway")

	if handler.SvcMap == nil {
		handler.SvcMap = make(map[string]genericclient.Client)
	}

	idlPath := "./idl/"
	c, err := os.ReadDir(idlPath)
	if err != nil {
		hlog.Fatalf("new thrift file provider failed: %v", err)
	}

	nacosResolver, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		hlog.Fatalf("err:%v", err)
	}

	for _, entry := range c {

		svcName := strings.ReplaceAll(entry.Name(), ".thrift", "")

		provider, err := generic.NewThriftFileProvider(entry.Name(), idlPath)
		if err != nil {
			hlog.Fatalf("new thrift file provider failed: %v", err)
			break
		}

		g, err := generic.HTTPThriftGeneric(provider)
		if err != nil {
			hlog.Fatal(err)
		}

		cli, err := genericclient.NewClient(
			svcName,
			g,
			client.WithResolver(nacosResolver),
		)
		if err != nil {
			hlog.Fatal(err)
		}

		handler.SvcMap[svcName] = cli
	}

	group.POST("/:svc", handler.Gateway)
}
